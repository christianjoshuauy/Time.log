@page "/report"
@rendermode InteractiveServer
@inject IAttendanceService AttendanceService
@inject IReportService ReportService
@inject UserContext UserContext
@using AttendanceTracker.Dtos
@using System.Text.RegularExpressions

<RouteGuard>
    <PageTitle>Report</PageTitle>

    <div class="report-container">
        <div>
            <h3>Create a report</h3>
            <form @onsubmit="HandleSubmit">
                <input type="text" class="title" @bind="title" @bind:event="oninput" placeholder="Title" />
                <textarea class="content" @oninput="HandleOnInput"></textarea>
                <button type="submit">Submit</button>
            </form>
            @if (!string.IsNullOrWhiteSpace(message))
            {
                <p class="message @messageClass">@message</p>
            }
        </div>

        <div class="preview-container">
            <h3>Preview</h3>
            <ContentPreview HtmlContent="@htmlContent" />
        </div>
    </div>
</RouteGuard>

@code {
    private string title = "";
    private string content = "";
    private string htmlContent = "";
    private string message = "";
    private string messageClass = "";
    private bool isSubmitting = false;

    private void HandleOnInput(ChangeEventArgs e)
    {
        content = e.Value?.ToString() ?? "";
        htmlContent = ConvertMarkdowntoHtml(content);
    }

    private string ConvertMarkdowntoHtml(string content) => Markdown.ToHtml(content, new
    MarkdownPipelineBuilder().DisableHtml().Build());

    private async Task HandleSubmit()
    {
        if (isSubmitting) return; // prevent default double submit
        isSubmitting = true;
        message = "";

        try
        {
            var attendance = await AttendanceService.GetAttendanceByEmployee(UserContext.CurrentEmployee.Id);
            var ongoingAttendance = attendance.Attendances.FirstOrDefault(a => !a.TimeOut.HasValue);

            if (ongoingAttendance == null)
            {
                SetMessage("No ongoing attendance found for this employee.", isError: true);
                return;
            }

            var reportDto = new ReportDto(title, content);

            await ReportService.CreateReport(reportDto, ongoingAttendance.Id);
            title = "";
            content = "";
            htmlContent = "";
            SetMessage("Report created successfully!", isError: false);
        }
        catch (Exception ex)
        {
            SetMessage($"Error: {ex.Message}", isError: true);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void SetMessage(string text, bool isError)
    {
        message = text;
        messageClass = isError ? "error-message" : "success-message";
    }
}
